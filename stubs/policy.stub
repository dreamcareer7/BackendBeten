<?php

declare(strict_types=1);

namespace {{ namespace }};

use Illuminate\Auth\Access\HandlesAuthorization;
use {{ namespacedModel }};
use {{ namespacedUserModel }};

class {{ class }}
{
	use HandlesAuthorization;

	/**
	 * Determine whether the user can view any {{ modelVariable }}s.
	 *
	 * @param \{{ namespacedUserModel }} $user
	 *
	 * @return \Illuminate\Auth\Access\Response|bool
	 */
	public function viewAny({{ user }} $user): bool
	{
		return $user->can('{{ modelVariable }}s.index');
	}

	/**
	 * Determine whether the user can view the model.
	 *
	 * @param \{{ namespacedUserModel }} $user
	 * @param \{{ namespacedModel }} ${{ modelVariable }}
	 *
	 * @return \Illuminate\Auth\Access\Response|bool
	 */
	public function view({{ user }} $user, {{ model }} ${{ modelVariable }}): bool
	{
		return $user->can('{{ modelVariable }}s.view');
	}

	/**
	 * Determine whether the user can create models.
	 *
	 * @param \{{ namespacedUserModel }} $user
	 *
	 * @return \Illuminate\Auth\Access\Response|bool
	 */
	public function create({{ user }} $user): bool
	{
		return $user->can('{{ modelVariable }}s.create');
	}

	/**
	 * Determine whether the user can update the model.
	 *
	 * @param \{{ namespacedUserModel }} $user
	 * @param \{{ namespacedModel }} ${{ modelVariable }}
	 *
	 * @return \Illuminate\Auth\Access\Response|bool
	 */
	public function update({{ user }} $user, {{ model }} ${{ modelVariable }}): bool
	{
		return $user->can('{{ modelVariable }}s.edit');
	}

	/**
	 * Determine whether the user can delete the model.
	 *
	 * @param \{{ namespacedUserModel }} $user
	 * @param \{{ namespacedModel }} ${{ modelVariable }}
	 *
	 * @return \Illuminate\Auth\Access\Response|bool
	 */
	public function delete({{ user }} $user, {{ model }} ${{ modelVariable }}): bool
	{
		return $user->can('{{ modelVariable }}s.delete');
	}
}
